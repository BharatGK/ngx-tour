{"version":3,"sources":["webpack:///./src/app/md-menu/docs.component.html","webpack:///./src/app/md-menu/docs.component.ts","webpack:///./src/app/md-menu/md-menu.component.html","webpack:///./src/app/md-menu/md-menu.component.ts","webpack:///./src/app/md-menu/md-menu.module.ts","webpack:///./src/app/md-menu/other-route.component.ts"],"names":[],"mappings":"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","file":"md-menu-md-menu-module.js","sourcesContent":["module.exports = \"<h2>About</h2>\\n<p>This is a product tour library built with Angular (2+). It's inspired by\\n  <a tourAnchor=\\\"angular-ui-tour\\\" href=\\\"http://benmarch.github.io/angular-ui-tour\\\">angular-ui-tour</a>.</p>\\n<p>\\n  <code>TourMatMenuModule</code> is an implementation of the tour ui that uses\\n  <a href=\\\"http://material.angular.io\\\">Angular Material</a> MatMenu to display tour steps.</p>\\n\\n<h2 tourAnchor=\\\"installation\\\">Installation</h2>\\n<ol>\\n  <li>\\n    <code>npm install ngx-tour-core ngx-tour-md-menu @angular/animations @angular/cdk @angular/http @angular/material</code>\\n  </li>\\n  <li>Import\\n    <code>TourMatMenuModule.forRoot()</code> into your app module</li>\\n  <li>Make sure\\n    <code>RouterModule</code> is imported in your app module</li>\\n  <li>Make sure Angular Material is\\n    <a href=\\\"https://material.angular.io/guide/getting-started\\\">installed correctly</a>\\n  </li>\\n</ol>\\n\\n<h2 tourAnchor=\\\"usage\\\">Usage</h2>\\n\\n<h4>Simple project</h4>\\n<ol>\\n  <li>Add\\n    <code>&lt;tour-step-template&gt;&lt;/tour-step-template&gt;</code> to your root app component</li>\\n  <li>\\n    Define anchor points for the tour steps by adding the\\n    <code>tourAnchor</code> directive throughout your app.\\n    <pre><code>&lt;div tourAnchor=\\\"some.anchor.id\\\"&gt;...&lt;/div&gt;</code></pre>\\n  </li>\\n  <li>\\n    Define your tour steps using\\n    <code>tourService.initialize(steps)</code>\\n    <pre>\\nthis.tourService.initialize([{{ '{' }}\\n  anchorId: 'some.anchor.id',\\n  content: 'Some content',\\n  title: 'First',\\n}, {{ '{' }}\\n  anchorId: 'another.anchor.id',\\n  content: 'Other content',\\n  title: 'Second',\\n}]);</pre>\\n  </li>\\n  <li>Start the tour with\\n    <code tourAnchor=\\\"tourService.start\\\">tourService.start()</code>\\n  </li>\\n  <li>Check out the\\n    <a href=\\\"https://github.com/isaacplmann/ngx-tour/tree/master/src/app/md-menu\\\">demo source code</a> for an example.</li>\\n</ol>\\n\\n<h4>Lazy loaded modules</h4>\\n\\n<ol>\\n\\n  <li>\\n    Add\\n    <pre><code>&lt;tour-step-template&gt;&lt;/tour-step-template&gt;</code></pre> to your root app component.\\n  </li>\\n  <li>\\n    Import\\n    <pre><code>TourMatMenuModule.forRoot()</code></pre> into your app module.\\n  </li>\\n  <li>\\n    Import\\n    <pre><code>TourMatMenuModule</code></pre> into all lazy loaded modules needing the tour.\\n  </li>\\n  <li>\\n    Import the\\n    <pre><code>TourService</code></pre> in your highest level eagerly loaded component and initialize all your steps there (even the ones in the lazy loaded\\n    modules).\\n    <strong>Note:</strong>\\n    Make sure every step object contains its route. For example, if the route to a step is '/home' then your step object should\\n    have\\n    <code>route: '/home'</code> as a member.\\n  </li>\\n  <li>\\n    Define anchor points for your steps by adding the\\n    <pre><code>tourAnchor</code></pre> directive throughout your modules (any component that requires it at any level).\\n    <pre><code>&lt;div tourAnchor=\\\"some.anchor.id\\\"&gt;...&lt;/div&gt;</code></pre>\\n  </li>\\n  <li>\\n    Start the tour with\\n    <pre><code>tourService.start()</code></pre> in the same component you initialized your steps. Call this right after the initialization.\\n  </li>\\n  <li>Check out the\\n    <a href=\\\"https://github.com/isaacplmann/ngx-tour/tree/master/src/app/md-menu/mat-lazy-menu\\\">demo source code</a> for an example.\\n  </li>\\n\\n</ol>\\n\\n<h2>TourService</h2>\\n<p>The\\n  <code>TourService</code> controls the tour. Some key functions include:</p>\\n<dl>\\n  <dt>start()</dt>\\n  <dd>Starts the tour</dd>\\n  <dt>startAt(stepId: number | string)</dt>\\n  <dd>Start the tour at the step with stepId or at the specified index</dd>\\n  <dt>end()</dt>\\n  <dd>Ends the tour</dd>\\n  <dt>pause()</dt>\\n  <dd>Pauses the tour</dd>\\n  <dt>resume()</dt>\\n  <dd>Resumes the tour</dd>\\n  <dt>next()</dt>\\n  <dd>Goes to the next step</dd>\\n  <dt>prev()</dt>\\n  <dd>Goes to the previous step</dd>\\n</dl>\\n\\n<h2>Step Configuration</h2>\\n<p>Each step can have the following properties.</p>\\n<table class=\\\"table\\\">\\n  <thead>\\n    <tr>\\n      <th>Name</th>\\n      <th>Type</th>\\n      <th>Default</th>\\n      <th>Description</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>stepId</td>\\n      <td>string</td>\\n      <td>\\\"\\\"</td>\\n      <td>A unique identifier for the step</td>\\n    </tr>\\n    <tr tourAnchor=\\\"config.anchorId\\\">\\n      <td>anchorId</td>\\n      <td>string</td>\\n      <td>required</td>\\n      <td>The anchor to which the step will be attached</td>\\n    </tr>\\n    <tr>\\n      <td>title</td>\\n      <td>string</td>\\n      <td>\\\"\\\"</td>\\n      <td>The title of the tour step</td>\\n    </tr>\\n    <tr>\\n      <td>content</td>\\n      <td>string</td>\\n      <td>\\\"\\\"</td>\\n      <td>The content text of the tour step</td>\\n    </tr>\\n    <tr tourAnchor=\\\"config.route\\\">\\n      <td>route</td>\\n      <td>string | UrlSegment[]</td>\\n      <td>undefined</td>\\n      <td>\\n        The route to which the tour should navigate before attempting to show this tour step. If undefined, no navigation is attempted.\\n      </td>\\n    </tr>\\n    <tr tourAnchor=\\\"config.nextStep\\\">\\n      <td>nextStep</td>\\n      <td>number | string</td>\\n      <td>undefined</td>\\n      <td>The step index or stepId of the next step. If undefined, the next step in the steps array is used.</td>\\n    </tr>\\n    <tr>\\n      <td>prevStep</td>\\n      <td>number | string</td>\\n      <td>undefined</td>\\n      <td>The step index or stepId of the previous step. If undefined, the previous step in the steps array is used.</td>\\n    </tr>\\n    <tr>\\n      <td>\\n        <del>placement</del>\\n      </td>\\n      <td>N/A</td>\\n      <td>N/A</td>\\n      <td>\\n        Ignored by\\n        <code>TourMatMenuModule</code>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>preventScrolling</td>\\n      <td>boolean</td>\\n      <td>false</td>\\n      <td>\\n        Tour steps automatically scroll to the middle of the screen, if they are off the screen when shown. Setting this value to\\n        true will disable the scroll behavior.\\n      </td>\\n    </tr>\\n    <tr tourAnchor=\\\"config.buttons.custom\\\">\\n      <td>prevBtnTitle</td>\\n      <td>string</td>\\n      <td>false</td>\\n      <td>\\n        Sets a custom prev button title for a given step. Default is \\\"Prev\\\"\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>nextBtnTitle</td>\\n      <td>string</td>\\n      <td>false</td>\\n      <td>\\n        Sets a custom next button title for a given step. Default is \\\"Next\\\"\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>endBtnTitle</td>\\n      <td>string</td>\\n      <td>false</td>\\n      <td>\\n        Sets a custom end button title for a given step. Default is \\\"End\\\"\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\\n<h2>Defaults</h2>\\n<p>You can set default values in the\\n  <code>TourService.initialize</code> function.</p>\\n<pre>\\nthis.tourService.initialize(steps, {{ '{' }}\\n  route: '',\\n  preventScrolling: true,\\n});\\n</pre>\\n<p>Any value explicitly defined in a step will override the default value.</p>\\n\\n<h2 tourAnchor=\\\"hotkeys\\\">Hotkeys</h2>\\n<p>\\n  Hotkeys are provided using Angular's\\n  <code>@HostListener</code> decorator. Hotkeys are enabled when the tour starts and disabled when the tour ends.\\n</p>\\n<ul>\\n  <li>\\n    <strong>left arrow</strong>\\n    <span> - previous step</span>\\n  </li>\\n  <li>\\n    <strong>right arrow</strong>\\n    <span> - next step</span>\\n  </li>\\n  <li>\\n    <strong>esc</strong>\\n    <span> - end tour</span>\\n  </li>\\n</ul>\\n<p>\\n  You can disable hotkeys by calling\\n  <code>tourService.disableHotkeys()</code> or re-enable with\\n  <code>tourService.enableHotkeys()</code>\\n</p>\\n\\n<h2 tourAnchor=\\\"events\\\">Event Observables</h2>\\n<p>The\\n  <code>TourService</code> emits events that can be subscribed to like this:</p>\\n<pre>\\nthis.tourService.initialize$.subscribe((steps: IStepOption[]) => {{ '{' }}\\n  console.log('tour configured with these steps:', steps);\\n});\\n</pre>\\n<table class=\\\"table\\\">\\n  <thead>\\n    <tr>\\n      <th>Name</th>\\n      <th>Payload</th>\\n      <th>Emitted When</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>stepShow$</td>\\n      <td>IStepOption</td>\\n      <td>A step is shown</td>\\n    </tr>\\n    <tr>\\n      <td>stepHide$</td>\\n      <td>IStepOption</td>\\n      <td>A step is hidden</td>\\n    </tr>\\n    <tr>\\n      <td>initialize$</td>\\n      <td>IStepOption[]</td>\\n      <td>The tour is configured with a set of steps</td>\\n    </tr>\\n    <tr>\\n      <td>start$</td>\\n      <td>IStepOption</td>\\n      <td>The tour begins</td>\\n    </tr>\\n    <tr>\\n      <td>end$</td>\\n      <td>any</td>\\n      <td>The tour ends</td>\\n    </tr>\\n    <tr>\\n      <td>pause$</td>\\n      <td>IStepOption</td>\\n      <td>The tour is paused</td>\\n    </tr>\\n    <tr>\\n      <td>resume$</td>\\n      <td>IStepOption</td>\\n      <td>The tour resumes</td>\\n    </tr>\\n    <tr>\\n      <td>anchorRegister$</td>\\n      <td>string</td>\\n      <td>An anchor is registered with the tour</td>\\n    </tr>\\n    <tr>\\n      <td>anchorUnregister$</td>\\n      <td>string</td>\\n      <td>An anchor is unregistered from the tour</td>\\n    </tr>\\n  </tbody>\\n</table>\\n\\n<h2 tourAnchor=\\\"template\\\">Custom template</h2>\\n<p>\\n  You can also customize the tour step template by providing an\\n  <code>&lt;ng-template let-step=\\\"step\\\" &gt;</code> inside the\\n  <code>&lt;tour-step-template&gt;</code>\\n</p>\\n<p>\\n  The default template is equivalent to this:\\n</p>\\n<pre><code>&lt;tour-step-template&gt;\\n  &lt;ng-template let-step=\\\"step\\\"&gt;\\n    &lt;mat-card (click)=\\\"$event.stopPropagation()\\\"&gt;\\n      &lt;mat-card-title&gt;\\n        {{ '{{' }}step?.title}}\\n      &lt;/mat-card-title&gt;\\n      &lt;mat-card-content&gt;\\n        {{ '{{' }}step?.content}}\\n      &lt;/mat-card-content&gt;\\n      &lt;mat-card-actions&gt;\\n        &lt;button mat-icon-button [disabled]=\\\"!tourService.hasPrev(step)\\\" (click)=\\\"tourService.prev()\\\"&gt;\\n          &lt;mat-icon&gt;chevron_left&lt;/mat-icon&gt;\\n        &lt;/button&gt;\\n        &lt;button mat-icon-button [disabled]=\\\"!tourService.hasNext(step)\\\" (click)=\\\"tourService.next()\\\"&gt;\\n          &lt;mat-icon&gt;chevron_right&lt;/mat-icon&gt;\\n        &lt;/button&gt;\\n        &lt;button mat-button (click)=\\\"tourService.end()\\\"&gt;{{ '{{' }}step?.endBtnTitle}}&lt;/button&gt;\\n      &lt;/mat-card-actions&gt;\\n    &lt;/mat-card&gt;\\n  &lt;/ng-template&gt;\\n&lt;/tour-step-template&gt;\\n</code></pre>\\n\\n<h2>Styling Active Tour Anchor</h2>\\n<p>\\n  The currently active tour anchor element has a\\n  <code>touranchor--is-active</code> class applied to it, so you can apply your own custom styles to that class to highlight the element being referenced.\\n</p>\"","import { Component } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'docs',\n  templateUrl: './docs.component.html',\n})\nexport class DocsComponent {\n}\n","module.exports = \"<a href=\\\"https://github.com/isaacplmann/ng2-tour\\\" class=\\\"btn btn-default\\\">View on GitHub</a>\\n<a style=\\\"cursor: pointer\\\" (click)=\\\"tourService.toggle()\\\" class=\\\"btn btn-primary\\\" tourAnchor=\\\"start.tour\\\">Start Demo Tour</a>\\n\\n<router-outlet></router-outlet>\\n<tour-step-template>\\n  <!-- <ng-template #jsonTemplate let-step=\\\"step\\\">\\n      {{ step | json }}\\n  </ng-template> -->\\n</tour-step-template>\\n\"","import { TourService } from 'ngx-tour-md-menu';\nimport { Component } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'md-menu-route',\n  templateUrl: './md-menu.component.html',\n})\nexport class MdMenuComponent {\n  constructor(public tourService: TourService) {\n    this.tourService.initialize([{\n      anchorId: 'start.tour',\n      content: 'Welcome to the Ngx-Tour tour!',\n      placement: 'below',\n      title: 'Welcome',\n    }, {\n      anchorId: 'angular-ui-tour',\n      content: 'Thanks to angular-ui-tour for the inspiration for the library',\n      route: '',\n      title: 'angular-ui-tour',\n    }, {\n      anchorId: 'installation',\n      content: 'First, install the library...',\n      title: 'Installation',\n    }, {\n      anchorId: 'usage',\n      content: '...then use it.',\n      title: 'Usage',\n    }, {\n      anchorId: 'tourService.start',\n      content: 'Don\\'t forget to actually start the tour.',\n      title: 'Start the tour',\n    }, {\n      anchorId: 'config.anchorId',\n      content: 'Every step needs an anchor.',\n      title: 'Anchor',\n    }, {\n      anchorId: 'config.route',\n      content: 'Tours can span multiple routes.',\n      title: 'Route',\n    }, {\n      anchorId: 'another.route',\n      content: 'Like this!',\n      route: 'other',\n      title: 'Another Route',\n    }, {\n      anchorId: 'config.route',\n      content: 'And then back again.',\n      placement: 'below',\n      title: 'Route Return',\n    }, {\n      anchorId: 'config.buttons.custom',\n      content: 'You can set custom step button names',\n      title: 'Button Titles',\n      prevBtnTitle: 'My Prev',\n      nextBtnTitle: 'My Next',\n      endBtnTitle: 'My End'\n    }, {\n      anchorId: 'hotkeys',\n      content: 'Try using the hotkeys to navigate through the tour.',\n      title: 'Hotkeys',\n    }, {\n      anchorId: 'events',\n      content: 'You can subscribe to events',\n      title: 'Events',\n    }], {\n      route: 'md-menu',\n    });\n    this.tourService.start();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { TourMatMenuModule } from 'ngx-tour-md-menu';\n\nimport { DocsComponent } from './docs.component';\nimport { MdMenuComponent } from './md-menu.component';\nimport { OtherRouteComponent } from './other-route.component';\n\n@NgModule({\n  declarations: [MdMenuComponent, DocsComponent, OtherRouteComponent],\n  imports: [\n    CommonModule,\n    TourMatMenuModule.forRoot(),\n    RouterModule.forChild([{\n      component: MdMenuComponent,\n      path: '',\n      children: [{\n        component: DocsComponent,\n        path: '',\n      }, {\n        component: OtherRouteComponent,\n        path: 'other',\n      }]\n    }]),\n  ],\n})\nexport class MdMenuModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'other-route',\n  template: `<p>This is the <strong tourAnchor=\"another.route\">another</strong> route</p>`,\n})\nexport class OtherRouteComponent {\n}\n"],"sourceRoot":""}